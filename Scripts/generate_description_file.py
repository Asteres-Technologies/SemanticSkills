"""
A script to generate a description file for skills in the repo.
Uses OpenAI's GPT-4 model to generate a description for each skill.
Each skprompt.txt file in the repo is summarized and described.
A standard format in TOML for the description is used.

[description]
skill_name = "The name of the skill."
skill_description = "A 1 sentence description of the skill."
output_name = "The name of the output/result generated by the skill."
output_description = "A 1 sentence description of the output"
output_uses = "A 1 sentence description of how the output can be used."
output_type = "The type of output, such as raw test, list as a string, number as a string, json, toml, xml, etc. as mime types. Invented types are allowed."
[[arguments]]
argument_name = "The name of the argument."
argument_identifier = "{{argument_name}}"
argument_description = "A 1 sentence description of the argument."
argument_sources = "A 1 sentence description of where the argument could come from."
argument_type = "The expected type of the argument, such as string, number, list, etc. as mime types. Invented types are allowed."

The description file is saved in the same directory as the skprompt.txt file as skill_description.toml.
"""
import toml
import os, sys, argparse

def validate_description_generation(description_toml):
    """
    Take an AI generated description of a skill adhering to the TOML format and ensures it is valid.
    """
    required_parameters = [
        "skill_name",
        "skill_description",
        "output_name",
        "output_description",
        "output_uses",
        "output_type",
        "arguments"
    ]

    arguments_required_parameters = [
        "argument_name",
        "argument_identifier",
        "argument_description",
        "argument_sources",
        "argument_type"
    ]

    try:
        parsed_toml = toml.loads(description_toml)
        description = parsed_toml.get("description", {})
        arguments = description.get("arguments", [])

        for argument in arguments:
            for param in arguments_required_parameters:
                if param not in argument:
                    return False, param

        for param in required_parameters:
            if param not in description and param not in arguments:
                return False, param

        return True, None

    except toml.TomlDecodeError:
        return False, "TOMLDecodeError"

def get_skprompt_template(directory):
    """Get the skprompt.txt file from the folder and return it as a string."""
    with open(directory + '/skprompt.txt', 'r') as f:
        return f.read()

def get_skill_name_from_directory(directory):
    """Get the skill name from the directory."""
    directory_parts = os.path.normpath(directory).split(os.sep)
    return f"{directory_parts[-2]}.{directory_parts[-1]}"

def get_full_prompt(template):
    """Get the full prompt from the template."""
    system_prompt = """A 1 sentence description of the argument."\nargument_identifier = "{{argument_name}}"\n\n[example]\nprompt: <content> [instructions]\nThe following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.\n\n[scenario]\n{{$user}}:I have a question. Can you help? \n{{$bot}}:Of course. I am your AI Copilot. Go on!\n{{$history}}\n{{$user}}:{{$input}}\n{{$bot}}: <end content>\ndescription (1 sentence): The skill of providing helpful, creative, clever, and friendly assistance to users in a wide range of scenarios.\n[end example]\n\n[example]\nprompt:<content>[BANNED COMMANDS]\nFORMAT\nDISKPART\nPARTITION\nCREATE PARTITION\nFSUTIL\n[END]\n\nWRITE A DOS SCRIPT. End each script with an exit /b %ERRORLEVEL%\n \nNEVER USE BANNED COMMANDS. BANNED COMMANDS DO DAMAGE. YOU NEVER WANT TO DO DAMAGE. \nINSTEAD ECHO "SORRY {{$firstName}}, I CAN\'T DO THAT. "\n\nList all pdf files in current folder\ndir *.pdf\nexit /b %ERRORLEVEL%\n\n{{$input}}<end content>\ndescription (1 sentence): The skill to generate DOS scripts that perform specific tasks while avoiding the use of banned commands for safety purposes.\n[end example]\n\n[instructions]\nYour job is to create a toml description of the prompt template for the given format. For each one, be thoughtful in how you summarize and describe them. They should be descriptive enough for an LLM to understand how to use it and a VectorDatabase to generate enough similarity to tasks the AI is trying to complete.\n\n[scenario]\nprompt: <content>{{$undescribed_template}}<end content>\ndescription (1 sentence):"""
    embdedded_template_param = "{{$undescribed_template}}"
    full_prompt = system_prompt.replace(embdedded_template_param, template)
    return full_prompt

def generate_description(template):
    """Generate a description from the template."""
    prompt = get_full_prompt(template)
    pass

def create_description(directory):
    """Main function."""
    #check to see if the directory contains a skprompt.txt file and exists.
    if not os.path.exists(directory):
        print("Directory does not exist.")
        sys.exit(1)

    if 'skprompt.txt' not in os.listdir(directory):
        print("Directory does not contain a skprompt.txt file.")
        sys.exit(1)
    
    #Get the skprompt.txt file
    template = get_skprompt_template(directory)
    skill_name = get_skill_name_from_directory(directory)

    #Generate the description

def main(directory):
    pass

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate a description file for skills in the repo.')
    parser.add_argument('directory', type=str, help='The directory to search.')
    parser.add_argument('--debug', type=bool, help='Debug mode to make sure validator is working', default=False)
    args = parser.parse_args()

    directory = args.directory
    debug = args.debug

    if debug:
        # Example usage
        description_toml_string = """
        [description]
        skill_name = "Image Recognition"
        skill_description = "The ability to identify objects and patterns in images."
        output_name = "recognized_objects"
        output_description = "The recognized objects in the image."
        output_uses = "To provide object detection and classification in image processing."
        output_type = "json"

        [[description.arguments]]
        argument_name = "image_url"
        argument_identifier = "{{image_url}}"
        argument_description = "The URL or path to the image for recognition."
        argument_sources = "User input or external API."
        argument_type = "string"
        """
        results = validate_description_generation(description_toml_string)

        if results[0]:
            print("All required parameters exist in the TOML string.")
        else:
            print("One or more required parameters are missing in the TOML string.", results[1])
    else:
        main(directory)
